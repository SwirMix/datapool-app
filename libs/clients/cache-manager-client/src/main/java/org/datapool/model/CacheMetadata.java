/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datapool.model;

import java.util.*;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

import org.datapool.model.CacheMetadataKey;
import org.datapool.model.Message;

/**
 * CacheMetadata
 */
public class CacheMetadata {
  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    READY("READY"),
    
    CLEANING("CLEANING"),
    
    BUSY("BUSY"),
    
    CREATED("CREATED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CACHE_ID = "cacheId";
  @SerializedName(SERIALIZED_NAME_CACHE_ID)
  private String cacheId;

  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  private CacheMetadataKey cache;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PERSISTENCE("PERSISTENCE"),
    
    DATA_TIME_LIMIT("DATA_TIME_LIMIT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private Map<String, String> columns = null;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private Message message;

  public static final String SERIALIZED_NAME_LAST_UPDATE_DATE = "lastUpdateDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_DATE)
  private Date lastUpdateDate;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;


  public CacheMetadata status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CacheMetadata cacheId(String cacheId) {
    
    this.cacheId = cacheId;
    return this;
  }

   /**
   * Get cacheId
   * @return cacheId
  **/


  public String getCacheId() {
    return cacheId;
  }


  public void setCacheId(String cacheId) {
    this.cacheId = cacheId;
  }


  public CacheMetadata cache(CacheMetadataKey cache) {
    
    this.cache = cache;
    return this;
  }

   /**
   * Get cache
   * @return cache
  **/


  public CacheMetadataKey getCache() {
    return cache;
  }


  public void setCache(CacheMetadataKey cache) {
    this.cache = cache;
  }


  public CacheMetadata type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/


  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CacheMetadata columns(Map<String, String> columns) {
    
    this.columns = columns;
    return this;
  }

  public CacheMetadata putColumnsItem(String key, String columnsItem) {
    if (this.columns == null) {
      this.columns = new HashMap<>();
    }
    this.columns.put(key, columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/


  public Map<String, String> getColumns() {
    return columns;
  }


  public void setColumns(Map<String, String> columns) {
    this.columns = columns;
  }


  public CacheMetadata message(Message message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/


  public Message getMessage() {
    return message;
  }


  public void setMessage(Message message) {
    this.message = message;
  }


  public CacheMetadata lastUpdateDate(Date lastUpdateDate) {
    
    this.lastUpdateDate = lastUpdateDate;
    return this;
  }

   /**
   * Get lastUpdateDate
   * @return lastUpdateDate
  **/


  public Date getLastUpdateDate() {
    return lastUpdateDate;
  }


  public void setLastUpdateDate(Date lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
  }


  public CacheMetadata size(Long size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/


  public Long getSize() {
    return size;
  }


  public void setSize(Long size) {
    this.size = size;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CacheMetadata cacheMetadata = (CacheMetadata) o;
    return Objects.equals(this.status, cacheMetadata.status) &&
        Objects.equals(this.cacheId, cacheMetadata.cacheId) &&
        Objects.equals(this.cache, cacheMetadata.cache) &&
        Objects.equals(this.type, cacheMetadata.type) &&
        Objects.equals(this.columns, cacheMetadata.columns) &&
        Objects.equals(this.message, cacheMetadata.message) &&
        Objects.equals(this.lastUpdateDate, cacheMetadata.lastUpdateDate) &&
        Objects.equals(this.size, cacheMetadata.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, cacheId, cache, type, columns, message, lastUpdateDate, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CacheMetadata {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    cacheId: ").append(toIndentedString(cacheId)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    lastUpdateDate: ").append(toIndentedString(lastUpdateDate)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

