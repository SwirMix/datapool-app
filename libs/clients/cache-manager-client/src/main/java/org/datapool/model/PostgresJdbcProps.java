/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datapool.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * PostgresJdbcProps
 */
public class PostgresJdbcProps {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_DRIVER_CLASS_NAME = "driverClassName";
  @SerializedName(SERIALIZED_NAME_DRIVER_CLASS_NAME)
  private String driverClassName;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;


  public PostgresJdbcProps url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/


  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public PostgresJdbcProps username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/


  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public PostgresJdbcProps password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/


  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public PostgresJdbcProps driverClassName(String driverClassName) {
    
    this.driverClassName = driverClassName;
    return this;
  }

   /**
   * Get driverClassName
   * @return driverClassName
  **/


  public String getDriverClassName() {
    return driverClassName;
  }


  public void setDriverClassName(String driverClassName) {
    this.driverClassName = driverClassName;
  }


  public PostgresJdbcProps schema(String schema) {
    
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/


  public String getSchema() {
    return schema;
  }


  public void setSchema(String schema) {
    this.schema = schema;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostgresJdbcProps postgresJdbcProps = (PostgresJdbcProps) o;
    return Objects.equals(this.url, postgresJdbcProps.url) &&
        Objects.equals(this.username, postgresJdbcProps.username) &&
        Objects.equals(this.password, postgresJdbcProps.password) &&
        Objects.equals(this.driverClassName, postgresJdbcProps.driverClassName) &&
        Objects.equals(this.schema, postgresJdbcProps.schema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, username, password, driverClassName, schema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostgresJdbcProps {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    driverClassName: ").append(toIndentedString(driverClassName)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

