/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datapool.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * CreateCacheRequest
 */
public class CreateCacheRequest {
  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  private CacheMetadataKey cache;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private Map<String, String> columns = null;

  /**
   * Gets or Sets cacheType
   */
  @JsonAdapter(CacheTypeEnum.Adapter.class)
  public enum CacheTypeEnum {
    PERSISTENCE("PERSISTENCE"),
    
    DATA_TIME_LIMIT("DATA_TIME_LIMIT");

    private String value;

    CacheTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CacheTypeEnum fromValue(String value) {
      for (CacheTypeEnum b : CacheTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CacheTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CacheTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CacheTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CacheTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CACHE_TYPE = "cacheType";
  @SerializedName(SERIALIZED_NAME_CACHE_TYPE)
  private CacheTypeEnum cacheType;


  public CreateCacheRequest cache(CacheMetadataKey cache) {
    
    this.cache = cache;
    return this;
  }

   /**
   * Get cache
   * @return cache
  **/


  public CacheMetadataKey getCache() {
    return cache;
  }


  public void setCache(CacheMetadataKey cache) {
    this.cache = cache;
  }


  public CreateCacheRequest columns(Map<String, String> columns) {
    
    this.columns = columns;
    return this;
  }

  public CreateCacheRequest putColumnsItem(String key, String columnsItem) {
    if (this.columns == null) {
      this.columns = new HashMap<>();
    }
    this.columns.put(key, columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/


  public Map<String, String> getColumns() {
    return columns;
  }


  public void setColumns(Map<String, String> columns) {
    this.columns = columns;
  }


  public CreateCacheRequest cacheType(CacheTypeEnum cacheType) {
    
    this.cacheType = cacheType;
    return this;
  }

   /**
   * Get cacheType
   * @return cacheType
  **/


  public CacheTypeEnum getCacheType() {
    return cacheType;
  }


  public void setCacheType(CacheTypeEnum cacheType) {
    this.cacheType = cacheType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCacheRequest createCacheRequest = (CreateCacheRequest) o;
    return Objects.equals(this.cache, createCacheRequest.cache) &&
        Objects.equals(this.columns, createCacheRequest.columns) &&
        Objects.equals(this.cacheType, createCacheRequest.cacheType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cache, columns, cacheType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCacheRequest {\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    cacheType: ").append(toIndentedString(cacheType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

